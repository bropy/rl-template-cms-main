/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    pages: Page;
    categories: Category;
    products: Product;
    templates: Template;
    images: Image;
    users: User;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    categories: {
      products: 'products';
    };
  };
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    products: ProductsSelect<false> | ProductsSelect<true>;
    templates: TemplatesSelect<false> | TemplatesSelect<true>;
    images: ImagesSelect<false> | ImagesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    layout: Layout;
  };
  globalsSelect: {
    layout: LayoutSelect<false> | LayoutSelect<true>;
  };
  locale: 'en' | 'de' | 'ar';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  name: string;
  slug?: string | null;
  slugLock?: boolean | null;
  blocks?:
    | (
        | {
            template: string | Template;
            id?: string | null;
            blockName?: string | null;
            blockType: 'templateBlock';
          }
        | {
            image: string | Image;
            title: string;
            subtitle?: string | null;
            action: {
              actionType: 'link' | 'linkIcon' | 'linkIconOnly' | 'button' | 'buttonIcon' | 'buttonIconOnly';
              text?: string | null;
              url?: string | null;
              /**
               * Copy and paste the icon svg code from: https://lucide.dev/icons
               */
              iconSvg?: string | null;
              iconPosition?: ('left' | 'right') | null;
              linkColor: 'foreground' | 'primary' | 'secondary' | 'success' | 'warning';
              linkVariant: 'default' | 'underline';
              buttonColor: 'default' | 'primary' | 'secondary' | 'success' | 'danger' | 'warning';
              buttonVariant: 'light' | 'solid' | 'ghost' | 'faded' | 'flat' | 'shadow' | 'bordered';
              asLink?: boolean | null;
              openInNewTab?: boolean | null;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'heroBlock';
          }
        | {
            rows: {
              image: string | Image;
              id?: string | null;
            }[];
            id?: string | null;
            blockName?: string | null;
            blockType: 'imageScrollerBlock';
          }
        | {
            title: string;
            subtitle?: string | null;
            content: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            contentAlignment: 'left' | 'center' | 'right';
            textAlignment: 'left' | 'center' | 'right';
            id?: string | null;
            blockName?: string | null;
            blockType: 'sectionBlock';
          }
        | {
            title: string;
            subtitle?: string | null;
            rows?:
              | {
                  image: string | Image;
                  title: string;
                  description: string;
                  url: string;
                  id?: string | null;
                }[]
              | null;
            action?: {
              actionType: 'link' | 'linkIcon' | 'linkIconOnly' | 'button' | 'buttonIcon' | 'buttonIconOnly';
              text?: string | null;
              url?: string | null;
              /**
               * Copy and paste the icon svg code from: https://lucide.dev/icons
               */
              iconSvg?: string | null;
              iconPosition?: ('left' | 'right') | null;
              linkColor: 'foreground' | 'primary' | 'secondary' | 'success' | 'warning';
              linkVariant: 'default' | 'underline';
              buttonColor: 'default' | 'primary' | 'secondary' | 'success' | 'danger' | 'warning';
              buttonVariant: 'light' | 'solid' | 'ghost' | 'faded' | 'flat' | 'shadow' | 'bordered';
              asLink?: boolean | null;
              openInNewTab?: boolean | null;
            };
            showAction?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'listBlock';
          }
        | {
            title: string;
            subtitle?: string | null;
            tabs?:
              | {
                  label: string;
                  /**
                   * Copy and paste the icon svg code from: https://lucide.dev/icons
                   */
                  icon: string;
                  title: string;
                  image: string | Image;
                  rows?:
                    | {
                        /**
                         * Copy and paste the icon svg code from: https://lucide.dev/icons
                         */
                        icon: string;
                        description: string;
                        id?: string | null;
                      }[]
                    | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'tabsBlock';
          }
        | {
            title: string;
            subtitle?: string | null;
            cardBlockType: 'cards' | 'list';
            categories?:
              | {
                  category: string | Category;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'categoriesBlock';
          }
        | {
            title: string;
            subtitle?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            formField: {
              fieldType: 'textInput' | 'emailInput' | 'phoneInput' | 'textareaInput' | 'select' | 'checkbox' | 'radio';
              fieldLabel?: string | null;
              fieldPlaceholder?: string | null;
              fieldIsRequired?: boolean | null;
              fieldInfoMessage?: string | null;
              fieldErrorMessage?: string | null;
              fieldOptions?:
                | {
                    fieldOptionLabel: string;
                    fieldOptionValue: string;
                    id?: string | null;
                  }[]
                | null;
            };
            formAction?: {
              actionType: 'link' | 'linkIcon' | 'linkIconOnly' | 'button' | 'buttonIcon' | 'buttonIconOnly';
              text?: string | null;
              url?: string | null;
              /**
               * Copy and paste the icon svg code from: https://lucide.dev/icons
               */
              iconSvg?: string | null;
              iconPosition?: ('left' | 'right') | null;
              linkColor: 'foreground' | 'primary' | 'secondary' | 'success' | 'warning';
              linkVariant: 'default' | 'underline';
              buttonColor: 'default' | 'primary' | 'secondary' | 'success' | 'danger' | 'warning';
              buttonVariant: 'light' | 'solid' | 'ghost' | 'faded' | 'flat' | 'shadow' | 'bordered';
              asLink?: boolean | null;
              openInNewTab?: boolean | null;
            };
            showSubmitButton?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'feedbackBlock';
          }
      )[]
    | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Image;
  };
  blocksInfo?: string | null;
  seoInfo?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templates".
 */
export interface Template {
  id: string;
  slug?: string | null;
  slugLock?: boolean | null;
  name: string;
  blocks?:
    | (
        | {
            image: string | Image;
            title: string;
            subtitle?: string | null;
            action: {
              actionType: 'link' | 'linkIcon' | 'linkIconOnly' | 'button' | 'buttonIcon' | 'buttonIconOnly';
              text?: string | null;
              url?: string | null;
              /**
               * Copy and paste the icon svg code from: https://lucide.dev/icons
               */
              iconSvg?: string | null;
              iconPosition?: ('left' | 'right') | null;
              linkColor: 'foreground' | 'primary' | 'secondary' | 'success' | 'warning';
              linkVariant: 'default' | 'underline';
              buttonColor: 'default' | 'primary' | 'secondary' | 'success' | 'danger' | 'warning';
              buttonVariant: 'light' | 'solid' | 'ghost' | 'faded' | 'flat' | 'shadow' | 'bordered';
              asLink?: boolean | null;
              openInNewTab?: boolean | null;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'heroBlock';
          }
        | {
            rows: {
              image: string | Image;
              id?: string | null;
            }[];
            id?: string | null;
            blockName?: string | null;
            blockType: 'imageScrollerBlock';
          }
        | {
            title: string;
            subtitle?: string | null;
            content: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            contentAlignment: 'left' | 'center' | 'right';
            textAlignment: 'left' | 'center' | 'right';
            id?: string | null;
            blockName?: string | null;
            blockType: 'sectionBlock';
          }
        | {
            title: string;
            subtitle?: string | null;
            rows?:
              | {
                  image: string | Image;
                  title: string;
                  description: string;
                  url: string;
                  id?: string | null;
                }[]
              | null;
            action?: {
              actionType: 'link' | 'linkIcon' | 'linkIconOnly' | 'button' | 'buttonIcon' | 'buttonIconOnly';
              text?: string | null;
              url?: string | null;
              /**
               * Copy and paste the icon svg code from: https://lucide.dev/icons
               */
              iconSvg?: string | null;
              iconPosition?: ('left' | 'right') | null;
              linkColor: 'foreground' | 'primary' | 'secondary' | 'success' | 'warning';
              linkVariant: 'default' | 'underline';
              buttonColor: 'default' | 'primary' | 'secondary' | 'success' | 'danger' | 'warning';
              buttonVariant: 'light' | 'solid' | 'ghost' | 'faded' | 'flat' | 'shadow' | 'bordered';
              asLink?: boolean | null;
              openInNewTab?: boolean | null;
            };
            showAction?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'listBlock';
          }
        | {
            title: string;
            subtitle?: string | null;
            tabs?:
              | {
                  label: string;
                  /**
                   * Copy and paste the icon svg code from: https://lucide.dev/icons
                   */
                  icon: string;
                  title: string;
                  image: string | Image;
                  rows?:
                    | {
                        /**
                         * Copy and paste the icon svg code from: https://lucide.dev/icons
                         */
                        icon: string;
                        description: string;
                        id?: string | null;
                      }[]
                    | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'tabsBlock';
          }
        | {
            title: string;
            subtitle?: string | null;
            cardBlockType: 'cards' | 'list';
            categories?:
              | {
                  category: string | Category;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'categoriesBlock';
          }
        | {
            title: string;
            subtitle?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            formField: {
              fieldType: 'textInput' | 'emailInput' | 'phoneInput' | 'textareaInput' | 'select' | 'checkbox' | 'radio';
              fieldLabel?: string | null;
              fieldPlaceholder?: string | null;
              fieldIsRequired?: boolean | null;
              fieldInfoMessage?: string | null;
              fieldErrorMessage?: string | null;
              fieldOptions?:
                | {
                    fieldOptionLabel: string;
                    fieldOptionValue: string;
                    id?: string | null;
                  }[]
                | null;
            };
            formAction?: {
              actionType: 'link' | 'linkIcon' | 'linkIconOnly' | 'button' | 'buttonIcon' | 'buttonIconOnly';
              text?: string | null;
              url?: string | null;
              /**
               * Copy and paste the icon svg code from: https://lucide.dev/icons
               */
              iconSvg?: string | null;
              iconPosition?: ('left' | 'right') | null;
              linkColor: 'foreground' | 'primary' | 'secondary' | 'success' | 'warning';
              linkVariant: 'default' | 'underline';
              buttonColor: 'default' | 'primary' | 'secondary' | 'success' | 'danger' | 'warning';
              buttonVariant: 'light' | 'solid' | 'ghost' | 'faded' | 'flat' | 'shadow' | 'bordered';
              asLink?: boolean | null;
              openInNewTab?: boolean | null;
            };
            showSubmitButton?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'feedbackBlock';
          }
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "images".
 */
export interface Image {
  id: string;
  alt: string;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  slug?: string | null;
  slugLock?: boolean | null;
  name: string;
  image: string | Image;
  description?: string | null;
  products?: {
    docs?: (string | Product)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  blocks?:
    | (
        | {
            template: string | Template;
            id?: string | null;
            blockName?: string | null;
            blockType: 'templateBlock';
          }
        | {
            image: string | Image;
            title: string;
            subtitle?: string | null;
            action: {
              actionType: 'link' | 'linkIcon' | 'linkIconOnly' | 'button' | 'buttonIcon' | 'buttonIconOnly';
              text?: string | null;
              url?: string | null;
              /**
               * Copy and paste the icon svg code from: https://lucide.dev/icons
               */
              iconSvg?: string | null;
              iconPosition?: ('left' | 'right') | null;
              linkColor: 'foreground' | 'primary' | 'secondary' | 'success' | 'warning';
              linkVariant: 'default' | 'underline';
              buttonColor: 'default' | 'primary' | 'secondary' | 'success' | 'danger' | 'warning';
              buttonVariant: 'light' | 'solid' | 'ghost' | 'faded' | 'flat' | 'shadow' | 'bordered';
              asLink?: boolean | null;
              openInNewTab?: boolean | null;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'heroBlock';
          }
        | {
            rows: {
              image: string | Image;
              id?: string | null;
            }[];
            id?: string | null;
            blockName?: string | null;
            blockType: 'imageScrollerBlock';
          }
        | {
            title: string;
            subtitle?: string | null;
            content: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            contentAlignment: 'left' | 'center' | 'right';
            textAlignment: 'left' | 'center' | 'right';
            id?: string | null;
            blockName?: string | null;
            blockType: 'sectionBlock';
          }
        | {
            title: string;
            subtitle?: string | null;
            rows?:
              | {
                  image: string | Image;
                  title: string;
                  description: string;
                  url: string;
                  id?: string | null;
                }[]
              | null;
            action?: {
              actionType: 'link' | 'linkIcon' | 'linkIconOnly' | 'button' | 'buttonIcon' | 'buttonIconOnly';
              text?: string | null;
              url?: string | null;
              /**
               * Copy and paste the icon svg code from: https://lucide.dev/icons
               */
              iconSvg?: string | null;
              iconPosition?: ('left' | 'right') | null;
              linkColor: 'foreground' | 'primary' | 'secondary' | 'success' | 'warning';
              linkVariant: 'default' | 'underline';
              buttonColor: 'default' | 'primary' | 'secondary' | 'success' | 'danger' | 'warning';
              buttonVariant: 'light' | 'solid' | 'ghost' | 'faded' | 'flat' | 'shadow' | 'bordered';
              asLink?: boolean | null;
              openInNewTab?: boolean | null;
            };
            showAction?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'listBlock';
          }
        | {
            title: string;
            subtitle?: string | null;
            tabs?:
              | {
                  label: string;
                  /**
                   * Copy and paste the icon svg code from: https://lucide.dev/icons
                   */
                  icon: string;
                  title: string;
                  image: string | Image;
                  rows?:
                    | {
                        /**
                         * Copy and paste the icon svg code from: https://lucide.dev/icons
                         */
                        icon: string;
                        description: string;
                        id?: string | null;
                      }[]
                    | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'tabsBlock';
          }
        | {
            title: string;
            subtitle?: string | null;
            cardBlockType: 'cards' | 'list';
            categories?:
              | {
                  category: string | Category;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'categoriesBlock';
          }
        | {
            title: string;
            subtitle?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            formField: {
              fieldType: 'textInput' | 'emailInput' | 'phoneInput' | 'textareaInput' | 'select' | 'checkbox' | 'radio';
              fieldLabel?: string | null;
              fieldPlaceholder?: string | null;
              fieldIsRequired?: boolean | null;
              fieldInfoMessage?: string | null;
              fieldErrorMessage?: string | null;
              fieldOptions?:
                | {
                    fieldOptionLabel: string;
                    fieldOptionValue: string;
                    id?: string | null;
                  }[]
                | null;
            };
            formAction?: {
              actionType: 'link' | 'linkIcon' | 'linkIconOnly' | 'button' | 'buttonIcon' | 'buttonIconOnly';
              text?: string | null;
              url?: string | null;
              /**
               * Copy and paste the icon svg code from: https://lucide.dev/icons
               */
              iconSvg?: string | null;
              iconPosition?: ('left' | 'right') | null;
              linkColor: 'foreground' | 'primary' | 'secondary' | 'success' | 'warning';
              linkVariant: 'default' | 'underline';
              buttonColor: 'default' | 'primary' | 'secondary' | 'success' | 'danger' | 'warning';
              buttonVariant: 'light' | 'solid' | 'ghost' | 'faded' | 'flat' | 'shadow' | 'bordered';
              asLink?: boolean | null;
              openInNewTab?: boolean | null;
            };
            showSubmitButton?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'feedbackBlock';
          }
        | {
            includeProducts: 'byCategorySlug';
            id?: string | null;
            blockName?: string | null;
            blockType: 'productsBlock';
          }
      )[]
    | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Image;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products".
 */
export interface Product {
  id: string;
  _products_products_order?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  isBestChoice?: boolean | null;
  isValueForMoney?: boolean | null;
  hasDiscount?: boolean | null;
  hasDetails?: boolean | null;
  image: string | Image;
  shortName: string;
  fullName: string;
  estimatedPrice: number;
  discountPercent?: number | null;
  categories: string | Category;
  productLink: string;
  rank: {
    value: number;
    label: string;
  };
  details?:
    | {
        title: string;
        rows?:
          | {
              /**
               * Copy and paste the icon svg code from: https://lucide.dev/icons
               */
              iconSvg: string;
              label: string;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  blocks?:
    | (
        | {
            template: string | Template;
            id?: string | null;
            blockName?: string | null;
            blockType: 'templateBlock';
          }
        | {
            image: string | Image;
            title: string;
            subtitle?: string | null;
            action: {
              actionType: 'link' | 'linkIcon' | 'linkIconOnly' | 'button' | 'buttonIcon' | 'buttonIconOnly';
              text?: string | null;
              url?: string | null;
              /**
               * Copy and paste the icon svg code from: https://lucide.dev/icons
               */
              iconSvg?: string | null;
              iconPosition?: ('left' | 'right') | null;
              linkColor: 'foreground' | 'primary' | 'secondary' | 'success' | 'warning';
              linkVariant: 'default' | 'underline';
              buttonColor: 'default' | 'primary' | 'secondary' | 'success' | 'danger' | 'warning';
              buttonVariant: 'light' | 'solid' | 'ghost' | 'faded' | 'flat' | 'shadow' | 'bordered';
              asLink?: boolean | null;
              openInNewTab?: boolean | null;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'heroBlock';
          }
        | {
            rows: {
              image: string | Image;
              id?: string | null;
            }[];
            id?: string | null;
            blockName?: string | null;
            blockType: 'imageScrollerBlock';
          }
        | {
            title: string;
            subtitle?: string | null;
            content: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            contentAlignment: 'left' | 'center' | 'right';
            textAlignment: 'left' | 'center' | 'right';
            id?: string | null;
            blockName?: string | null;
            blockType: 'sectionBlock';
          }
        | {
            title: string;
            subtitle?: string | null;
            rows?:
              | {
                  image: string | Image;
                  title: string;
                  description: string;
                  url: string;
                  id?: string | null;
                }[]
              | null;
            action?: {
              actionType: 'link' | 'linkIcon' | 'linkIconOnly' | 'button' | 'buttonIcon' | 'buttonIconOnly';
              text?: string | null;
              url?: string | null;
              /**
               * Copy and paste the icon svg code from: https://lucide.dev/icons
               */
              iconSvg?: string | null;
              iconPosition?: ('left' | 'right') | null;
              linkColor: 'foreground' | 'primary' | 'secondary' | 'success' | 'warning';
              linkVariant: 'default' | 'underline';
              buttonColor: 'default' | 'primary' | 'secondary' | 'success' | 'danger' | 'warning';
              buttonVariant: 'light' | 'solid' | 'ghost' | 'faded' | 'flat' | 'shadow' | 'bordered';
              asLink?: boolean | null;
              openInNewTab?: boolean | null;
            };
            showAction?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'listBlock';
          }
        | {
            title: string;
            subtitle?: string | null;
            tabs?:
              | {
                  label: string;
                  /**
                   * Copy and paste the icon svg code from: https://lucide.dev/icons
                   */
                  icon: string;
                  title: string;
                  image: string | Image;
                  rows?:
                    | {
                        /**
                         * Copy and paste the icon svg code from: https://lucide.dev/icons
                         */
                        icon: string;
                        description: string;
                        id?: string | null;
                      }[]
                    | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'tabsBlock';
          }
        | {
            title: string;
            subtitle?: string | null;
            cardBlockType: 'cards' | 'list';
            categories?:
              | {
                  category: string | Category;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'categoriesBlock';
          }
        | {
            title: string;
            subtitle?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            formField: {
              fieldType: 'textInput' | 'emailInput' | 'phoneInput' | 'textareaInput' | 'select' | 'checkbox' | 'radio';
              fieldLabel?: string | null;
              fieldPlaceholder?: string | null;
              fieldIsRequired?: boolean | null;
              fieldInfoMessage?: string | null;
              fieldErrorMessage?: string | null;
              fieldOptions?:
                | {
                    fieldOptionLabel: string;
                    fieldOptionValue: string;
                    id?: string | null;
                  }[]
                | null;
            };
            formAction?: {
              actionType: 'link' | 'linkIcon' | 'linkIconOnly' | 'button' | 'buttonIcon' | 'buttonIconOnly';
              text?: string | null;
              url?: string | null;
              /**
               * Copy and paste the icon svg code from: https://lucide.dev/icons
               */
              iconSvg?: string | null;
              iconPosition?: ('left' | 'right') | null;
              linkColor: 'foreground' | 'primary' | 'secondary' | 'success' | 'warning';
              linkVariant: 'default' | 'underline';
              buttonColor: 'default' | 'primary' | 'secondary' | 'success' | 'danger' | 'warning';
              buttonVariant: 'light' | 'solid' | 'ghost' | 'faded' | 'flat' | 'shadow' | 'bordered';
              asLink?: boolean | null;
              openInNewTab?: boolean | null;
            };
            showSubmitButton?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'feedbackBlock';
          }
      )[]
    | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Image;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name?: string | null;
  role?: ('admin' | 'root') | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'products';
        value: string | Product;
      } | null)
    | ({
        relationTo: 'templates';
        value: string | Template;
      } | null)
    | ({
        relationTo: 'images';
        value: string | Image;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  slugLock?: T;
  blocks?:
    | T
    | {
        templateBlock?:
          | T
          | {
              template?: T;
              id?: T;
              blockName?: T;
            };
        heroBlock?:
          | T
          | {
              image?: T;
              title?: T;
              subtitle?: T;
              action?:
                | T
                | {
                    actionType?: T;
                    text?: T;
                    url?: T;
                    iconSvg?: T;
                    iconPosition?: T;
                    linkColor?: T;
                    linkVariant?: T;
                    buttonColor?: T;
                    buttonVariant?: T;
                    asLink?: T;
                    openInNewTab?: T;
                  };
              id?: T;
              blockName?: T;
            };
        imageScrollerBlock?:
          | T
          | {
              rows?:
                | T
                | {
                    image?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        sectionBlock?:
          | T
          | {
              title?: T;
              subtitle?: T;
              content?: T;
              contentAlignment?: T;
              textAlignment?: T;
              id?: T;
              blockName?: T;
            };
        listBlock?:
          | T
          | {
              title?: T;
              subtitle?: T;
              rows?:
                | T
                | {
                    image?: T;
                    title?: T;
                    description?: T;
                    url?: T;
                    id?: T;
                  };
              action?:
                | T
                | {
                    actionType?: T;
                    text?: T;
                    url?: T;
                    iconSvg?: T;
                    iconPosition?: T;
                    linkColor?: T;
                    linkVariant?: T;
                    buttonColor?: T;
                    buttonVariant?: T;
                    asLink?: T;
                    openInNewTab?: T;
                  };
              showAction?: T;
              id?: T;
              blockName?: T;
            };
        tabsBlock?:
          | T
          | {
              title?: T;
              subtitle?: T;
              tabs?:
                | T
                | {
                    label?: T;
                    icon?: T;
                    title?: T;
                    image?: T;
                    rows?:
                      | T
                      | {
                          icon?: T;
                          description?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        categoriesBlock?:
          | T
          | {
              title?: T;
              subtitle?: T;
              cardBlockType?: T;
              categories?:
                | T
                | {
                    category?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        feedbackBlock?:
          | T
          | {
              title?: T;
              subtitle?: T;
              formField?:
                | T
                | {
                    fieldType?: T;
                    fieldLabel?: T;
                    fieldPlaceholder?: T;
                    fieldIsRequired?: T;
                    fieldInfoMessage?: T;
                    fieldErrorMessage?: T;
                    fieldOptions?:
                      | T
                      | {
                          fieldOptionLabel?: T;
                          fieldOptionValue?: T;
                          id?: T;
                        };
                  };
              formAction?:
                | T
                | {
                    actionType?: T;
                    text?: T;
                    url?: T;
                    iconSvg?: T;
                    iconPosition?: T;
                    linkColor?: T;
                    linkVariant?: T;
                    buttonColor?: T;
                    buttonVariant?: T;
                    asLink?: T;
                    openInNewTab?: T;
                  };
              showSubmitButton?: T;
              id?: T;
              blockName?: T;
            };
      };
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  blocksInfo?: T;
  seoInfo?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  slug?: T;
  slugLock?: T;
  name?: T;
  image?: T;
  description?: T;
  products?: T;
  blocks?:
    | T
    | {
        templateBlock?:
          | T
          | {
              template?: T;
              id?: T;
              blockName?: T;
            };
        heroBlock?:
          | T
          | {
              image?: T;
              title?: T;
              subtitle?: T;
              action?:
                | T
                | {
                    actionType?: T;
                    text?: T;
                    url?: T;
                    iconSvg?: T;
                    iconPosition?: T;
                    linkColor?: T;
                    linkVariant?: T;
                    buttonColor?: T;
                    buttonVariant?: T;
                    asLink?: T;
                    openInNewTab?: T;
                  };
              id?: T;
              blockName?: T;
            };
        imageScrollerBlock?:
          | T
          | {
              rows?:
                | T
                | {
                    image?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        sectionBlock?:
          | T
          | {
              title?: T;
              subtitle?: T;
              content?: T;
              contentAlignment?: T;
              textAlignment?: T;
              id?: T;
              blockName?: T;
            };
        listBlock?:
          | T
          | {
              title?: T;
              subtitle?: T;
              rows?:
                | T
                | {
                    image?: T;
                    title?: T;
                    description?: T;
                    url?: T;
                    id?: T;
                  };
              action?:
                | T
                | {
                    actionType?: T;
                    text?: T;
                    url?: T;
                    iconSvg?: T;
                    iconPosition?: T;
                    linkColor?: T;
                    linkVariant?: T;
                    buttonColor?: T;
                    buttonVariant?: T;
                    asLink?: T;
                    openInNewTab?: T;
                  };
              showAction?: T;
              id?: T;
              blockName?: T;
            };
        tabsBlock?:
          | T
          | {
              title?: T;
              subtitle?: T;
              tabs?:
                | T
                | {
                    label?: T;
                    icon?: T;
                    title?: T;
                    image?: T;
                    rows?:
                      | T
                      | {
                          icon?: T;
                          description?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        categoriesBlock?:
          | T
          | {
              title?: T;
              subtitle?: T;
              cardBlockType?: T;
              categories?:
                | T
                | {
                    category?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        feedbackBlock?:
          | T
          | {
              title?: T;
              subtitle?: T;
              formField?:
                | T
                | {
                    fieldType?: T;
                    fieldLabel?: T;
                    fieldPlaceholder?: T;
                    fieldIsRequired?: T;
                    fieldInfoMessage?: T;
                    fieldErrorMessage?: T;
                    fieldOptions?:
                      | T
                      | {
                          fieldOptionLabel?: T;
                          fieldOptionValue?: T;
                          id?: T;
                        };
                  };
              formAction?:
                | T
                | {
                    actionType?: T;
                    text?: T;
                    url?: T;
                    iconSvg?: T;
                    iconPosition?: T;
                    linkColor?: T;
                    linkVariant?: T;
                    buttonColor?: T;
                    buttonVariant?: T;
                    asLink?: T;
                    openInNewTab?: T;
                  };
              showSubmitButton?: T;
              id?: T;
              blockName?: T;
            };
        productsBlock?:
          | T
          | {
              includeProducts?: T;
              id?: T;
              blockName?: T;
            };
      };
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products_select".
 */
export interface ProductsSelect<T extends boolean = true> {
  _products_products_order?: T;
  slug?: T;
  slugLock?: T;
  isBestChoice?: T;
  isValueForMoney?: T;
  hasDiscount?: T;
  hasDetails?: T;
  image?: T;
  shortName?: T;
  fullName?: T;
  estimatedPrice?: T;
  discountPercent?: T;
  categories?: T;
  productLink?: T;
  rank?:
    | T
    | {
        value?: T;
        label?: T;
      };
  details?:
    | T
    | {
        title?: T;
        rows?:
          | T
          | {
              iconSvg?: T;
              label?: T;
              id?: T;
            };
        id?: T;
      };
  blocks?:
    | T
    | {
        templateBlock?:
          | T
          | {
              template?: T;
              id?: T;
              blockName?: T;
            };
        heroBlock?:
          | T
          | {
              image?: T;
              title?: T;
              subtitle?: T;
              action?:
                | T
                | {
                    actionType?: T;
                    text?: T;
                    url?: T;
                    iconSvg?: T;
                    iconPosition?: T;
                    linkColor?: T;
                    linkVariant?: T;
                    buttonColor?: T;
                    buttonVariant?: T;
                    asLink?: T;
                    openInNewTab?: T;
                  };
              id?: T;
              blockName?: T;
            };
        imageScrollerBlock?:
          | T
          | {
              rows?:
                | T
                | {
                    image?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        sectionBlock?:
          | T
          | {
              title?: T;
              subtitle?: T;
              content?: T;
              contentAlignment?: T;
              textAlignment?: T;
              id?: T;
              blockName?: T;
            };
        listBlock?:
          | T
          | {
              title?: T;
              subtitle?: T;
              rows?:
                | T
                | {
                    image?: T;
                    title?: T;
                    description?: T;
                    url?: T;
                    id?: T;
                  };
              action?:
                | T
                | {
                    actionType?: T;
                    text?: T;
                    url?: T;
                    iconSvg?: T;
                    iconPosition?: T;
                    linkColor?: T;
                    linkVariant?: T;
                    buttonColor?: T;
                    buttonVariant?: T;
                    asLink?: T;
                    openInNewTab?: T;
                  };
              showAction?: T;
              id?: T;
              blockName?: T;
            };
        tabsBlock?:
          | T
          | {
              title?: T;
              subtitle?: T;
              tabs?:
                | T
                | {
                    label?: T;
                    icon?: T;
                    title?: T;
                    image?: T;
                    rows?:
                      | T
                      | {
                          icon?: T;
                          description?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        categoriesBlock?:
          | T
          | {
              title?: T;
              subtitle?: T;
              cardBlockType?: T;
              categories?:
                | T
                | {
                    category?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        feedbackBlock?:
          | T
          | {
              title?: T;
              subtitle?: T;
              formField?:
                | T
                | {
                    fieldType?: T;
                    fieldLabel?: T;
                    fieldPlaceholder?: T;
                    fieldIsRequired?: T;
                    fieldInfoMessage?: T;
                    fieldErrorMessage?: T;
                    fieldOptions?:
                      | T
                      | {
                          fieldOptionLabel?: T;
                          fieldOptionValue?: T;
                          id?: T;
                        };
                  };
              formAction?:
                | T
                | {
                    actionType?: T;
                    text?: T;
                    url?: T;
                    iconSvg?: T;
                    iconPosition?: T;
                    linkColor?: T;
                    linkVariant?: T;
                    buttonColor?: T;
                    buttonVariant?: T;
                    asLink?: T;
                    openInNewTab?: T;
                  };
              showSubmitButton?: T;
              id?: T;
              blockName?: T;
            };
      };
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templates_select".
 */
export interface TemplatesSelect<T extends boolean = true> {
  slug?: T;
  slugLock?: T;
  name?: T;
  blocks?:
    | T
    | {
        heroBlock?:
          | T
          | {
              image?: T;
              title?: T;
              subtitle?: T;
              action?:
                | T
                | {
                    actionType?: T;
                    text?: T;
                    url?: T;
                    iconSvg?: T;
                    iconPosition?: T;
                    linkColor?: T;
                    linkVariant?: T;
                    buttonColor?: T;
                    buttonVariant?: T;
                    asLink?: T;
                    openInNewTab?: T;
                  };
              id?: T;
              blockName?: T;
            };
        imageScrollerBlock?:
          | T
          | {
              rows?:
                | T
                | {
                    image?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        sectionBlock?:
          | T
          | {
              title?: T;
              subtitle?: T;
              content?: T;
              contentAlignment?: T;
              textAlignment?: T;
              id?: T;
              blockName?: T;
            };
        listBlock?:
          | T
          | {
              title?: T;
              subtitle?: T;
              rows?:
                | T
                | {
                    image?: T;
                    title?: T;
                    description?: T;
                    url?: T;
                    id?: T;
                  };
              action?:
                | T
                | {
                    actionType?: T;
                    text?: T;
                    url?: T;
                    iconSvg?: T;
                    iconPosition?: T;
                    linkColor?: T;
                    linkVariant?: T;
                    buttonColor?: T;
                    buttonVariant?: T;
                    asLink?: T;
                    openInNewTab?: T;
                  };
              showAction?: T;
              id?: T;
              blockName?: T;
            };
        tabsBlock?:
          | T
          | {
              title?: T;
              subtitle?: T;
              tabs?:
                | T
                | {
                    label?: T;
                    icon?: T;
                    title?: T;
                    image?: T;
                    rows?:
                      | T
                      | {
                          icon?: T;
                          description?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        categoriesBlock?:
          | T
          | {
              title?: T;
              subtitle?: T;
              cardBlockType?: T;
              categories?:
                | T
                | {
                    category?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        feedbackBlock?:
          | T
          | {
              title?: T;
              subtitle?: T;
              formField?:
                | T
                | {
                    fieldType?: T;
                    fieldLabel?: T;
                    fieldPlaceholder?: T;
                    fieldIsRequired?: T;
                    fieldInfoMessage?: T;
                    fieldErrorMessage?: T;
                    fieldOptions?:
                      | T
                      | {
                          fieldOptionLabel?: T;
                          fieldOptionValue?: T;
                          id?: T;
                        };
                  };
              formAction?:
                | T
                | {
                    actionType?: T;
                    text?: T;
                    url?: T;
                    iconSvg?: T;
                    iconPosition?: T;
                    linkColor?: T;
                    linkVariant?: T;
                    buttonColor?: T;
                    buttonVariant?: T;
                    asLink?: T;
                    openInNewTab?: T;
                  };
              showSubmitButton?: T;
              id?: T;
              blockName?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "images_select".
 */
export interface ImagesSelect<T extends boolean = true> {
  alt?: T;
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  role?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "layout".
 */
export interface Layout {
  id: string;
  blocks?:
    | (
        | {
            actions?:
              | {
                  actionType: 'link' | 'linkIcon' | 'linkIconOnly' | 'button' | 'buttonIcon' | 'buttonIconOnly';
                  text?: string | null;
                  url?: string | null;
                  /**
                   * Copy and paste the icon svg code from: https://lucide.dev/icons
                   */
                  iconSvg?: string | null;
                  iconPosition?: ('left' | 'right') | null;
                  linkColor: 'foreground' | 'primary' | 'secondary' | 'success' | 'warning';
                  linkVariant: 'default' | 'underline';
                  buttonColor: 'default' | 'primary' | 'secondary' | 'success' | 'danger' | 'warning';
                  buttonVariant: 'light' | 'solid' | 'ghost' | 'faded' | 'flat' | 'shadow' | 'bordered';
                  asLink?: boolean | null;
                  openInNewTab?: boolean | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'headerBlock';
          }
        | {
            columns?:
              | {
                  title: string;
                  links?:
                    | {
                        actionType: 'link' | 'linkIcon' | 'linkIconOnly' | 'button' | 'buttonIcon' | 'buttonIconOnly';
                        text?: string | null;
                        url?: string | null;
                        /**
                         * Copy and paste the icon svg code from: https://lucide.dev/icons
                         */
                        iconSvg?: string | null;
                        iconPosition?: ('left' | 'right') | null;
                        linkColor: 'foreground' | 'primary' | 'secondary' | 'success' | 'warning';
                        linkVariant: 'default' | 'underline';
                        buttonColor: 'default' | 'primary' | 'secondary' | 'success' | 'danger' | 'warning';
                        buttonVariant: 'light' | 'solid' | 'ghost' | 'faded' | 'flat' | 'shadow' | 'bordered';
                        asLink?: boolean | null;
                        openInNewTab?: boolean | null;
                        id?: string | null;
                      }[]
                    | null;
                  id?: string | null;
                }[]
              | null;
            copyright: {
              text: string;
              textAlignment: 'left' | 'center' | 'right';
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'footerBlock';
          }
      )[]
    | null;
  branding: {
    logoImage?: (string | null) | Image;
    /**
     * Copy and paste the icon svg code
     */
    logoIconSvg?: string | null;
    logoAsIconSvg?: boolean | null;
    favicon: string | Image;
    socialMediaLinks?:
      | {
          socialPlatform:
            | 'facebook'
            | 'instagram'
            | 'x'
            | 'linkedin'
            | 'youtube'
            | 'tiktok'
            | 'pinterest'
            | 'reddit'
            | 'snapchat'
            | 'twitch'
            | 'discord'
            | 'telegram'
            | 'whatsapp'
            | 'skype'
            | 'viber';
          socialUrl: string;
          /**
           * Copy and paste the icon svg code
           */
          socialIconSvg?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Image;
  };
  _status?: ('draft' | 'published') | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "layout_select".
 */
export interface LayoutSelect<T extends boolean = true> {
  blocks?:
    | T
    | {
        headerBlock?:
          | T
          | {
              actions?:
                | T
                | {
                    actionType?: T;
                    text?: T;
                    url?: T;
                    iconSvg?: T;
                    iconPosition?: T;
                    linkColor?: T;
                    linkVariant?: T;
                    buttonColor?: T;
                    buttonVariant?: T;
                    asLink?: T;
                    openInNewTab?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        footerBlock?:
          | T
          | {
              columns?:
                | T
                | {
                    title?: T;
                    links?:
                      | T
                      | {
                          actionType?: T;
                          text?: T;
                          url?: T;
                          iconSvg?: T;
                          iconPosition?: T;
                          linkColor?: T;
                          linkVariant?: T;
                          buttonColor?: T;
                          buttonVariant?: T;
                          asLink?: T;
                          openInNewTab?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              copyright?:
                | T
                | {
                    text?: T;
                    textAlignment?: T;
                  };
              id?: T;
              blockName?: T;
            };
      };
  branding?:
    | T
    | {
        logoImage?: T;
        logoIconSvg?: T;
        logoAsIconSvg?: T;
        favicon?: T;
        socialMediaLinks?:
          | T
          | {
              socialPlatform?: T;
              socialUrl?: T;
              socialIconSvg?: T;
              id?: T;
            };
      };
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  _status?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}